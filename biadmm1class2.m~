%% Start again mvdr beamformer, hopefully distributed using biadmm. Needs 
% to have 50 sensors randomly placed within a 100x100x100 m free space. One
% target speech signal, and one noise signal, also randomly placed. Signal
% of interest is a 20 s speech signal chosen randomly from a 60 s file. fs
% = 16 kHz. Window length is 25 ms with a Hann window and 50% overlap.
% Interference is a randomly placed, zero meaqn gaussian point source with
% power equal to -5, 0, 5 dB when compared to the target signal. 
close all; clear;

% Import target audio
Nsrcs = 26; % Nsrcs = number of sources
% [s1,fs1] = audioread('273177__xserra__la-vaca-cega-eva.wav'); 
% [s2,fs2] = audioread('317354__speedenza__shall-i-compare-thee-voice.wav'); 
s = cell(Nsrcs,1);

AudioFileNames = {'422-122949-0013.flac';
                  '2078-142845-0005.flac';
                  '2902-9006-0015.flac';
                  '1272-128104-0004.flac';
                  '422-122949-0014.flac';
                  '2078-142845-0025.flac';
                  '1919-142785-0007.flac';
                  '422-122949-0009.flac';
                  '174-168635-0018.flac';
                  '2902-9006-0017.flac';
                  '251-136532-0004.flac';
                  '2078-142845-0004.flac';
                  '2035-152373-0005.flac';
                  '2902-9006-0001.flac';
                  '1993-147964-0010.flac';
                  '1673-143396-0004.flac';
                  '2902-9008-0002.flac';
                  '422-122949-0000.flac';
                  '2078-142845-0039.flac';
                  '1919-142785-0008.flac';
                  '2412-153948-0004.flac';
                  '2078-142845-0007.flac';
                  '2078-142845-0043.flac';
                  '1988-148538-0006.flac';
                  '1919-142785-0005.flac';
                  '174-84280-0004.flac';
                  '422-122949-0019.flac';
                  '1993-147149-0006.flac'};

for ns=1:Nsrcs
    s{ns} = audioread(strcat('/audio/',AudioFileNames{ns})); 
end

% Downsample
% fsd = 16e3; % fsd = desired sampling frequency
% fs = fs1/round(fs1/fsd); % fs = actual sampling frequency post resample
% s1 = resample(s1,1,round(fs1/fsd));
% s2 = resample(s2,1,round(fs1/fsd));
fs = 16e3;

% Truncate to desired length, ensure that the length is a multiple of 
% the window length, and randomly select a section of the audio file.
K = 2^9+1; % K = window length in samples, and the number of frequency bins
Khalf = (K-1)/2-1;
tls = 5; % tls = target length in seconds
tl = tls*fs-mod(tls*fs,K-1); % tl = target length in samples, adjusted for window length and sampling frequency
% start = floor((length(s1)-tl)*rand);
% s1 = s1(start:start+tl-1,1); % Truncate s1 to be one channel, and 20 s long
% s2 = s2(start:start+tl-1,1); % Truncate s1 to be one channel, and 20 s long

% Truncate the audio files 
for ns=1:Nsrcs
    s{ns} = s{ns}(1:tl);
end

% % Normalize the target audio file to make it easy to change files
% s1rms = rms(s1);
% s1rmsinv = 1./s1rms;
% s1 = s1 * (0.1*diag(s1rmsinv));% This should probably be scaled down to avoid clipping
% s2rms = rms(s2);
% s2rmsinv = 1./s2rms;
% s2 = s2 * (0.1*diag(s2rmsinv));% This should probably be scaled down to avoid clipping

% Normalize the audio files
% for ns=1:Nsrcs    
%     s{ns} = (1/rms(s{ns}))*s{ns};
% end

% Set up interferers with equal power, i.e. snr = 0 dB 
Nsrcs = 26; % Nsrcs = number of sources
% s1Pow = (s1'*s1) / length(s1);
% s2 = sqrt(s1Pow) *  randn(length(s1),1); % Currently set up for equal power
% s2Pow = (s2'*s2) / length(s2);
% SourceSNRdB = 10*log10(s1Pow/s2Pow);
% si = sqrt(s1Pow)*randn(length(s1),Nsrcs-1); % /(Nsrcs-1)).
% si = 0.999*repmat(s2,1,Nsrcs-1); % /(Nsrcs-1)).
% for ns=1:Nsrcs-1
%     siPow(ns) = (si(:,ns)'*si(:,ns)) / length(si(:,ns));
% end
% 
% SourceSNRdB = 10*log10(s1Pow./siPow)

% set sources to zero for testing
% keep= 1;
% for ns=[1:keep-1,keep+1:Nsrcs]
%     s{ns} = zeros(length(s{ns}),1);
% end
%% STFT 
% % pad the source signals so the 1st half window doesn't distort the data
s1Padded = [zeros((K-1)/2,1);s{1};zeros((K-1)/2,1)];
% % s2Padded = [zeros((K-1)/2,1);s2;zeros((K-1)/2,1)];
% siPadded = [zeros((K-1)/2,Nsrcs-1);si;zeros((K-1)/2,Nsrcs-1)];
for ns=1:Nsrcs
    s{ns} =  [zeros((K-1)/2,1);s{ns};zeros((K-1)/2,1)];
end

% Take stft of both sources and truncate to exclude negative frequencies
% as well as dc and fs/2.
[S1,L] = stft(s1Padded,K);
S1half = S1(2:(K+1)/2-1,:);
% % [S2,L2] = stft(s2Padded,K);
% % S2half = S2(2:(K+1)/2-1,:);
% SI = zeros(K,L,Nsrcs-1);
% for ns=1:Nsrcs-1
%     SI(:,:,ns) = stft(siPadded(:,ns),K);
% end
% SIhalf = SI(2:(K+1)/2-1,:,:);

% Take stft of all sources
% for ns=1:Nsrcs
%     if ns==1
%         [S{ns},L] = stft(s{ns},K);
%     else
%         S{ns} = stft(s{ns},K);
%     end
%     S{ns} = S{ns}(2:(K+1)/2-1,:); % Chop to half spectrum from [1:(K-3)/2]*(fs/(K-1)) i.e. 
% end
[S,L] = stft(s,K);
for ns=1:Nsrcs
    Shalf{ns} = S{ns}(2:(K-1)/2,:);
end

%% Place sensors
M = 50; % M = number of sensors

% Create nodes
node = cell(2*M,1);
for m=1:2*M
    node{m} = myNode;
end

spSize = 100; % spSize = size of the room (m)
space = [spSize, spSize, spSize]'; % Dimensions of the space
spcDim = length(space);
Mloc = (rand(M,spcDim)*diag(space)).'; % Mloc = matrix containing 3d sensor locations
sloc = ((rand(Nsrcs,spcDim)*diag(space))).';%+[0,0,2;0,0,2]).'; % sloc = matrix containing 3d source locations

% Set location for each node
for m=1:M
    node{m}.loc = Mloc(:,m);
    node{m+M}.loc = 0; % Virtual nodes don't have a real location
end

% Calculate distances
ssd = zeros(Nsrcs,M); % ssd = source to sensor distances
for ns=1:Nsrcs
    for m=1:M
        ssd(ns,m) = norm(Mloc(:,m)-sloc(:,ns));
    end
end

%% Display layout
figure; plot3(Mloc(1,:), Mloc(2,:), Mloc(3,:), '*'); grid on; hold on; 
plot3(sloc(1,1), sloc(2,1), sloc(3,1), 'o'); 
plot3(sloc(1,2:end), sloc(2,2:end), sloc(3,2:end), '^'); legend('Sensors','Target','Interferer')
set(gca, 'fontsize', 14);

%% Create ATFs (This is the half spectrum one)

fdom = (fs/(K-1)) * (1:Khalf)';
c = 343; % c = speed of sound in m.s^-1
At = zeros(Khalf,M);
% Ai = zeros(Khalf,M,Nsrcs-1);
A = zeros(Khalf,M,Nsrcs);
for m=1:M
%     At(:,m) = exp(-1i*2*pi*fdom'*ssd(1,m)/c) / (4*pi*ssd(1,m)); % ^2
%     for ns=1:Nsrcs-1
%         Ai(:,m,ns) = exp(-1i*2*pi*fdom'*ssd(ns+1,m)/c);% / (4*pi*ssd(ns+1,m)); % ^2
%     end
    
    for ns=1:Nsrcs
        A(:,m,ns) = exp(-1i*2*pi*fdom'*ssd(ns,m)/c) / (4*pi*ssd(ns,m)); % ^2
    end
    
    node{m}.d = A(:,m,1); % Store each nodes Atf for the target (ns=1 is the target)
    node{m+M}.d = 0; % The virtual nodes have no need for an Atf
end

% Create observations
X = zeros(Khalf,L,M); % Xt = zeros(Khalf,L,M); Xi = zeros(Khalf,L,M);
for l = 1:L
    for m = 1:M
%         Xt(:,l,m) = At(:,m).*S1half(:,l); % These are used for calculating SNR 
%         Xi(:,l,m) = Ai(:,m).*S2half(:,l); % These are used for calculating SNR 
%         X(:,l,m) = Xt(:,l,m)+Xi(:,l,m);
%         X(:,l,m) = At(:,m).*S1half(:,l) + sum(squeeze(Ai(:,m,:)).*squeeze(SIhalf(:,l,:)),2);
        for ns=1:Nsrcs
            X(:,l,m) = X(:,l,m) + (A(:,m,ns).*Shalf{ns}(:,l));
        end
    end
end

% Check an observation
whichNode = 35;
whichSource = 3;
Xcheck = [zeros(1,L);X(:,:,whichNode);zeros(2,L);conj(flipud(X(:,:,whichNode)))];
mySpectrogram(Xcheck);
xh = myOverlapAdd(Xcheck);
figure; plot(xh);



% Xtcheck = [zeros(1,L);Xt(:,:,whichNode);zeros(2,L);conj(flipud(Xt(:,:,whichNode)))];
% mySpectrogram(Xtcheck);
% xtcheck = myOverlapAdd(Xtcheck);
% figure; plot(xtcheck);

for l=1:L
    Xt(:,l) = A(:,1,whichNode) .* Shalf{whichNode}(:,l);
%     Xt(:,l) = ones(K,1) .* S{1}(:,l);
end

% Check an observation
Xt = [zeros(1,L);Xt;zeros(2,L);conj(flipud(Xt))];
mySpectrogram(Xt);
xth = myOverlapAdd(Xt);
figure; plot(xth);



 %% Alternative for checking double sided
% Create ATFs
% 
fdom = (fs/(K-1)) * [0:(K-1)/2 , -(K-1)/2:-1]';
c = 343; % c = speed of sound in m.s^-1
% At = zeros(K,M);
% Ai = zeros(Khalf,M,Nsrcs-1);
A = zeros(K,M,Nsrcs);
for m=1:M
%     At(:,m) = exp(-1i*2*pi*fdom'*ssd(1,m)/c);% / (4*pi*ssd(1,m)); % ^2
%     for ns=1:Nsrcs-1
%         Ai(:,m,ns) = exp(-1i*2*pi*fdom'*ssd(ns+1,m)/c);% / (4*pi*ssd(ns+1,m)); % ^2
%     end
    
    for ns=1:Nsrcs
        A(:,m,ns) = exp(-1i*2*pi*fdom'*ssd(ns,m)/c) / (4*pi*ssd(ns,m)); % ^2
%         A(:,m,ns) = exp(-j*2*pi*fdom'*ssd(ns,m)/c) ;
    end
    
    node{m}.d = A(:,m,1); % Store each nodes Atf for the target (ns=1 is the target)
    node{m+M}.d = 0; % The virtual nodes have no need for an Atf
end

% Create observations
X = zeros(K,L,M); % 
Xt = zeros(K,L); %Xi = zeros(Khalf,L,M);
for l = 1:L
    for m = 1:M
%         Xt(:,l,m) = A(:,m,1).*S{1}(:,l); % These are used for calculating SNR 
%         Xi(:,l,m) = Ai(:,m).*S2half(:,l); % These are used for calculating SNR 
%         X(:,l,m) = Xt(:,l,m)+Xi(:,l,m);
%         X(:,l,m) = At(:,m).*S1half(:,l) + sum(squeeze(Ai(:,m,:)).*squeeze(SIhalf(:,l,:)),2);
        for ns=1:Nsrcs
            X(:,l,m) = X(:,l,m) + (A(:,m,ns).*S{ns}(:,l));
        end
    end
end

for l=1:L
    Xt(:,l) = A(:,whichNode,whichNode) .* S{whichNode}(:,l);
%     Xt(:,l) = ones(K,1) .* S{1}(:,l);
end

% Check an observation
mySpectrogram(X(:,:,whichNode));
xf = myOverlapAdd(X(:,:,whichNode));
figure; plot(xf);

mySpectrogram(Xt);
xtf = myOverlapAdd(Xt);
figure; plot(xtf);

return

%% Calculate covariances over all time
% R = cell(Khalf,1);
% for k=1:Khalf
%     for l=1:L
%         if l==1
%             R{k} = zeros(M);
%         end
%         R{k} = R{k} + (1/L)*squeeze(X(k,l,:))*squeeze(X(k,l,:))';
%     end
% end

%% Find sensor to sensor distances
sensd = zeros(M,M); % sensd = sensor to sensor distance
for m=1:M
    for mm=m:M
        sensd(m,mm) = norm(Mloc(:,m)-Mloc(:,mm));
    end
end
sensd = sensd + triu(sensd,1).'; % Convert from upper triangular to symmetric

%% Find neighbors, everyone within 0.6*spSize (Aiming for >5 neighbors each)
Nneighbors = zeros(M,1);
for m=1:M
    node{m}.N = [find(sensd(:,m)<0.5*spSize) ; m+M];
    node{m}.Nlen = length(node{m}.N);
    Nneighbors(m) = node{m}.Nlen;    
    node{m+M}.N = [m+M;m];
    node{m+M}.Nlen = 2;
end
fprintf('The minimum number of neighbors was %d. \nThe mean number of neighbors was %d. \n\n',min(Nneighbors),mean(Nneighbors));

%% Initialization
for m=1:M
    % Initialize Lambdas and weights
    node{m}.L = zeros(Khalf,2,node{m}.Nlen-1);
    node{m+M}.L = zeros(Khalf,2,1);
    node{m}.W = ones(Khalf,node{m}.Nlen);
    node{m+M}.W = ones(Khalf,1);
    
    % Initialize Amn for all nodes
    Amn = cell(node{m}.Nlen,1); 
    for n = 1:node{m}.Nlen-1 % -1 because I have to set up the virtual node differently
        Amn{n} = [(node{m}.N==m).';-(node{m}.N==node{m}.N(n)).'];
    end
    Amn{n+1} = [zeros(1,node{m}.Nlen);-(node{m}.N==node{m}.N(n+1)).'];
    node{m}.Amn = Amn;
    node{m+M}.Amn{1} = [1;0]; % This is a special consistency matrix A specifically for virtual nodes
    
    % Save look direction d for node m
    node{m}.d = At(:,m);
end

% Initialize regularization parameter alpha
alpha = 1;

% Initialize output Y
Y = zeros(Khalf,L);


%% Iterative update
% Step through windows

for l=1
    
    % Step through real (and virtual) nodes for primal/dual update
    for m=1:M
        
        % iter sets the number of iterative updates per window
        for iter=1
        
            % Get observations
            node{m}.X = squeeze(X(:,l,node{m}.N(1:end-1))); % -1 to exclude the virtual node

%             % Assign covariance from actual covariance calculated above
%             if l==1 && iter==1 
%                 for k=1:Khalf
%                     RTemp = zeros(node{m}.Nlen-1);
%                     for n=1:node{m}.Nlen-1
%                         RTemp(:,n) = R{k}(m,node{m}.N(1:end-1)).';
%                         RTemp(n,:) = R{k}(m,node{m}.N(1:end-1));
%                     end                
%                     node{m}.R{k} = RTemp;
%                 end
%             end

            % Calculate local covariance
            if iter==1
                for k=1:Khalf
                    node{m}.R{k} = node{m}.X(k,:).'*node{m}.X(k,:);
                end
            end
            
            % Initialize temp vars
            AAsum = zeros(node{m}.Nlen-1,node{m}.Nlen-1);
            ALAWsum = zeros(node{m}.Nlen-1,1);
            AARsum = zeros(node{m}.Nlen-1,node{m}.Nlen-1);
            ALAWARdsum = zeros(node{m}.Nlen-1,1);
            WRealNew = ones(Khalf,node{m}.Nlen);
            WVirtNew = ones(Khalf);
            LambdaRealNew = ones(Khalf,2,node{m}.Nlen);        
            LambdaVirtNew = ones(Khalf,2);
            LambdaNew = ones(Khalf,2,M);
            bk = zeros(Khalf,1);
            
            % Calculate primal update for real node
            for k=1:Khalf
%                 dTmp =  [node{m}.d(k);zeros(node{m}.Nlen-2,1)];
                dTmp = (node{m}.N(1:end-1)==m) * node{m}.d(k);
                
                for n=1:node{m}.Nlen-1 % -1 because I want to exclude the virtual node for now

                    % for W update
                    AmnTmp = node{m}.Amn{n}(:,1:node{m}.Nlen-1);
%                     AARsum = AARsum+(AmnTmp.'*AmnTmp+node{m}.R{k});
                    AAsum = AAsum+(AmnTmp.'*AmnTmp);
%                     LambdaTmp = node{node{m}.N(n)}.L(k,:,find(node{node{1}.N(1)}.N==1,1)).'; 
                    LambdanmTmp = node{node{m}.N(n)}.L(k,:,(node{node{m}.N(n)}.N==m)).';%(node{node{1}.N(1)}.N==1,1)).'; 
                    AnmTmp = flipud(node{node{m}.N(n)}.Amn{node{node{m}.N(n)}.N==m});% node{m}.Anm{n}(:,1:end-1);
                    WnTmp = node{node{m}.N(n)}.W(k,1:end).';
%                     ALAWdsum = ALAWdsum + (AmnTmp.'*(LambdanmTmp-AnmTmp*WTmp)+node{m}.d(k));
                    ALAWsum = ALAWsum + (AmnTmp.'*(LambdanmTmp-AnmTmp*WnTmp));

                    % For Lambda update, zk
%                     AARIsum = AARIsum + (AmnTmp.'*AmnTmp/node{m}.R{k}+eye(node{m}.Nlen-1));   
                    AARsum = AARsum + (AmnTmp.'*AmnTmp/node{m}.R{k}); 
                    ALAWARdsum = ALAWARdsum + (AmnTmp.'*(LambdanmTmp-AnmTmp*WnTmp-AmnTmp/node{m}.R{k}*dTmp));  
                 end
                
                WRealNew(k,1:node{m}.Nlen-1) = (AAsum+node{m}.R{k})\(ALAWsum+dTmp);
                zk = (AARsum+eye(node{m}.Nlen-1))\ALAWARdsum;

                % Lambda update requires twice around the neighboring nodes:
                % once for finding the summations in zk, and once for Lambda
                % itself.
                for n=1:node{m}.Nlen-1
%                     LambdanmTmp = node{node{m}.N(n)}.L(k,:,find(node{node{1}.N(1)}.N==1,1)).'; 
                    LambdanmTmp = node{node{m}.N(n)}.L(k,:,(node{node{m}.N(n)}.N==m)).';
%                     AnmTmp = -node{node{m}.N(n)}.Amn{(node{node{m}.N(n)}.N==m)};  %AnmTmp = node{m}.Anm{n}(:,1:end-1);
                    AnmTmp = flipud(node{node{m}.N(n)}.Amn{node{node{m}.N(n)}.N==m});
                    WnTmp = node{node{m}.N(n)}.W(k,:).';
                    AmnTmp = node{m}.Amn{n}(:,1:end-1);                
                    LambdaNew(k,:,n) = LambdanmTmp-AnmTmp*WnTmp-AmnTmp/node{m}.R{k}*(dTmp+zk);
                end 
                
                % Primal update for virtual node m+M
                WnTmp = node{m}.W(k,:); % Comes from m because m is n for virtual node m+M
%                 AnmTmp = (node{m}.Amn{node{m}.Nlen});
                AnmTmp = flipud(node{m}.Amn{end}); % Its ok to use end because m+M is always last 
                AmnTmp = node{m+M}.Amn{1};
                LambdanmTmp = node{m}.L(k,:,end);
                bk = 2*WnTmp*AnmTmp.'*AmnTmp-AmnTmp.'*LambdanmTmp.'; 
                WVirtNew(k) = (-bk+sign(bk)*min(abs(bk),alpha))/(1);

                % Dual update for virtual node m+M
                LambdamnTmp = node{m+M}.L(k,:);
                LambdaVirtNew(k,:) = 2*LambdanmTmp*LambdamnTmp.'-WnTmp*AnmTmp.';
                if LambdaVirtNew(k,1) > alpha
                    LambdaVirtNew(k,1) = alpha; 
                elseif LambdaVirtNew(k,1) < -alpha
                    LambdaVirtNew(k,1) = -alpha; 
                end
                if LambdaVirtNew(k,2) > alpha
                    LambdaVirtNew(k,2) = alpha; 
                elseif LambdaVirtNew(k,2) < -alpha
                    LambdaVirtNew(k,2) = -alpha; 
                end                  
            end   

            % Assign new W and L values to node m and m+M
            node{m}.W = WRealNew;
            node{m+M}.W = WVirtNew;
            node{m}.L = LambdaRealNew;
            node{m+M}.L = LambdaVirtNew;
        end
    end  
    
    % Generate output using updated primal and dual weights
    for m=1:M
        Y(:,l) = Y(:,l) + (1/M)*sum(node{m}.W(:,1:end-1).*node{m}.X,2);
    end   
    
end


%% Calculate BF output
Y = [zeros(1,L);Y;zeros(2,L);conj(flipud(Y))];
mySpectrogram(Y);
y = myOverlapAdd(Y);
figure; plot(y);

















